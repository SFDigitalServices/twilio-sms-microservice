# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7.2
        environment:
          DATABASE_URL: postgres://circleci@127.0.0.1:5432/circle_test
          REDIS_URL: redis://redis@127.0.0.1:6379
      - image: circleci/postgres:11.2
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: circle_test
      - image: circleci/redis:5.0.4

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Pipfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: sudo apt-get update
      - run: sudo apt-get install postgresql-client
      - run: sudo apt-get install vim-tiny
      - run:
          name: install dependencies
          command: |
            sudo pip install pipenv
            pipenv install

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "Pipfile.lock" }}

      # run pre-commits
      - run:
          name: run pre-commit
          command: |
            pipenv run pre-commit run --all-files
      - run:
          name: start gunicorn
          command: |
            pipenv run gunicorn 'service.microservice:start_service()'
          background: true

      - run:
          name: run db migrations
          command: |
            pipenv run alembic upgrade head

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            pipenv run python -m pytest --cov=service --cov=tasks tests/ --cov-fail-under=90
            pipenv run coveralls


      - store_artifacts:
          path: test-reports
          destination: test-reports
